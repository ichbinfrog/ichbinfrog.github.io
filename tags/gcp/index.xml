<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GCP on Hoang Quoc Trung</title>
    <link>https://ichbinfrog.github.io/tags/gcp/</link>
    <description>Recent content in GCP on Hoang Quoc Trung</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 15 Dec 2019 12:50:00 +0000</lastBuildDate>
    
	<atom:link href="https://ichbinfrog.github.io/tags/gcp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Cloud Provider benchmark</title>
      <link>https://ichbinfrog.github.io/internships/cloud_bench/</link>
      <pubDate>Sun, 15 Dec 2019 12:50:00 +0000</pubDate>
      
      <guid>https://ichbinfrog.github.io/internships/cloud_bench/</guid>
      <description>This benchmark is done in order to help in the process of deciding which public provider to migrate to. Three public cloud offers are studied (GCP (Google Cloud Platform), AWS (Amazon Web Service) and Microsoft Azure) in comparison to the private solution.
Computing offer comparison It is important to note that all the aforementioned providers have support for Linux as well as Windows VMs. Although terminologies vary widely between providers (machine type for GCP, instance for AWS, VM for Azure), they all provide a couple of essential categories of common machine families.</description>
    </item>
    
    <item>
      <title>Low-cost terraformed minecraft server on GCP</title>
      <link>https://ichbinfrog.github.io/projects/gcp_minecraft/</link>
      <pubDate>Sun, 15 Dec 2019 12:50:00 +0000</pubDate>
      
      <guid>https://ichbinfrog.github.io/projects/gcp_minecraft/</guid>
      <description>Out of pure nostalgia, I decided to setup an overengineered and cost-efficient minecraft server on GCP with the help of @Naramsim. The IaC code here can be found in this repo and this &amp;lsquo;blog&amp;rsquo; will detail some of the technical reasonings behind some opinionated choices.
Setting up CICD pipelines In terraform CICD pipelines, a google service account is often granted high privileges (with a lot lot of Admin roles) to terraform the infrastructure on the behest of the owner.</description>
    </item>
    
    <item>
      <title>Eclipse/steady â€” Infrastructure provisioning</title>
      <link>https://ichbinfrog.github.io/internships/eclipse_infrastructure/</link>
      <pubDate>Wed, 30 Oct 2019 11:25:00 +0000</pubDate>
      
      <guid>https://ichbinfrog.github.io/internships/eclipse_infrastructure/</guid>
      <description>It is important to note here that choices regarding the infrastructure cascade from decisions made in the implementation of the core components and the monitoring stack and not vice versa.
Kubernetes cluster creation Creating the underlying computing and networking resources for a functional k8s cluster can be done in two distinct ways:
 Manual:  Create the node pool on which Kubernetes will run Create networking resources to connect the different nodes in the same subnet Setup the k8s prerequisites (disable swap on all machines, install docker) via Ansible then the k8s architecture via Ansible while keeping in mind the differences between the master and worker nodes or with the kubespray tool.</description>
    </item>
    
  </channel>
</rss>